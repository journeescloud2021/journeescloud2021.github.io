/* AutoGenerated Code, changes may be overwritten
* INPUT GRAMMAR:
* Root := rooms=Rooms papers=Papers events=Events program=Program
* Rooms := '#' _ '[Rr]ooms' ENDLINE* rooms=Room*
* Room := _ '-' _ name=STRING _ capacite={',' _ value=INT}? ENDLINE*
* Papers := '#' _ '[Pp]apers' _ ENDLINE* papers=Paper*
* Paper := '##' _ paperName=STRING ENDLINE* authors=Person* abstract=Abstract? video=Video?
* Person := _ '-' _ name=STRING homepage={_ ',' _ value=LINK _}? email={_ ',' _ value=EMAIL _}? about={_ ',' _ value=STRING _}? ENDLINE*
* Abstract := _ '\*abstract\*:' ENDLINE text=MULTISTRING ENDLINE*
* Video := _ '\*video\*:' _ url=LINK ENDLINE*
* Events := '#' _ '[Ee]vents' _ ENDLINE* events=Event*
* Event := SimpleEvent | OrganizedEvent | TalkSession
* SimpleEvent := '##' _ eventName=STRING ENDLINE* abstract=Abstract? ENDLINE*
* OrganizedEvent := '##' _ '\(' _ eventType=STRING _ '\)' _ eventName=STRING ENDLINE* organizers=Person* abstract=Abstract? ENDLINE*
* TalkSession := '##' _ '\[' _ eventType=STRING _ '\]' _ eventName=STRING ENDLINE* organizers=Person* abstract=Abstract? ENDLINE* '###' _ '[Pp]apers' _ ENDLINE* papers={ _ '-' _ name=STRING ENDLINE*}*
* Program := '#' _ '[Pp]rogram' _ ENDLINE* days=Day*
* Day := _ '##' _ date=DATE _ ENDLINE* eventinfo=EventInfo*
* EventInfo := _ '-' _ timeSlot={start=HOUR _ '-' _ end=HOUR} _ 'in' _ roomName=ROOMSTRING _ ':' _ eventName=STRING _ ENDLINE*
* EMAIL := '[a-zA-Z0-9.!#$%&\'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*'
* LINK := 'https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*)'
* DATE := '(19|20)[0-9][0-9]-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01])'
* HOUR := '(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9])'
* STRING := '[a-zA-Z0-9]([a-zA-Z0-9.\- \:éíëàè\'\/]*[a-zA-Z0-9.éàíèë])?'
* ROOMSTRING := '[a-zA-Z0-9]([a-zA-Z0-9.\- éíëàè]*[a-zA-Z0-9.éàíèë])?'
* MULTISTRING := '([^\n\r]+\r?\n)*'
* INT := '[0-9]+'
* ENDLINE := _ ';|\n'
* _ := '[ \t\r\f]*'
*/
type Nullable<T> = T | null;
type $$RuleType<T> = () => Nullable<T>;
interface ASTNodeIntf {
    kind: ASTKinds;
}
export enum ASTKinds {
    Root = "Root",
    Rooms = "Rooms",
    Room = "Room",
    Room_$0 = "Room_$0",
    Papers = "Papers",
    Paper = "Paper",
    Person = "Person",
    Person_$0 = "Person_$0",
    Person_$1 = "Person_$1",
    Person_$2 = "Person_$2",
    Abstract = "Abstract",
    Video = "Video",
    Events = "Events",
    Event_1 = "Event_1",
    Event_2 = "Event_2",
    Event_3 = "Event_3",
    SimpleEvent = "SimpleEvent",
    OrganizedEvent = "OrganizedEvent",
    TalkSession = "TalkSession",
    TalkSession_$0 = "TalkSession_$0",
    Program = "Program",
    Day = "Day",
    EventInfo = "EventInfo",
    EventInfo_$0 = "EventInfo_$0",
    EMAIL = "EMAIL",
    LINK = "LINK",
    DATE = "DATE",
    HOUR = "HOUR",
    STRING = "STRING",
    ROOMSTRING = "ROOMSTRING",
    MULTISTRING = "MULTISTRING",
    INT = "INT",
    ENDLINE = "ENDLINE",
    _ = "_",
}
export interface Root {
    kind: ASTKinds.Root;
    rooms: Rooms;
    papers: Papers;
    events: Events;
    program: Program;
}
export interface Rooms {
    kind: ASTKinds.Rooms;
    rooms: Room[];
}
export interface Room {
    kind: ASTKinds.Room;
    name: STRING;
    capacite: Nullable<Room_$0>;
}
export interface Room_$0 {
    kind: ASTKinds.Room_$0;
    value: INT;
}
export interface Papers {
    kind: ASTKinds.Papers;
    papers: Paper[];
}
export interface Paper {
    kind: ASTKinds.Paper;
    paperName: STRING;
    authors: Person[];
    abstract: Nullable<Abstract>;
    video: Nullable<Video>;
}
export interface Person {
    kind: ASTKinds.Person;
    name: STRING;
    homepage: Nullable<Person_$0>;
    email: Nullable<Person_$1>;
    about: Nullable<Person_$2>;
}
export interface Person_$0 {
    kind: ASTKinds.Person_$0;
    value: LINK;
}
export interface Person_$1 {
    kind: ASTKinds.Person_$1;
    value: EMAIL;
}
export interface Person_$2 {
    kind: ASTKinds.Person_$2;
    value: STRING;
}
export interface Abstract {
    kind: ASTKinds.Abstract;
    text: MULTISTRING;
}
export interface Video {
    kind: ASTKinds.Video;
    url: LINK;
}
export interface Events {
    kind: ASTKinds.Events;
    events: Event[];
}
export type Event = Event_1 | Event_2 | Event_3;
export type Event_1 = SimpleEvent;
export type Event_2 = OrganizedEvent;
export type Event_3 = TalkSession;
export interface SimpleEvent {
    kind: ASTKinds.SimpleEvent;
    eventName: STRING;
    abstract: Nullable<Abstract>;
}
export interface OrganizedEvent {
    kind: ASTKinds.OrganizedEvent;
    eventType: STRING;
    eventName: STRING;
    organizers: Person[];
    abstract: Nullable<Abstract>;
}
export interface TalkSession {
    kind: ASTKinds.TalkSession;
    eventType: STRING;
    eventName: STRING;
    organizers: Person[];
    abstract: Nullable<Abstract>;
    papers: TalkSession_$0[];
}
export interface TalkSession_$0 {
    kind: ASTKinds.TalkSession_$0;
    name: STRING;
}
export interface Program {
    kind: ASTKinds.Program;
    days: Day[];
}
export interface Day {
    kind: ASTKinds.Day;
    date: DATE;
    eventinfo: EventInfo[];
}
export interface EventInfo {
    kind: ASTKinds.EventInfo;
    timeSlot: EventInfo_$0;
    roomName: ROOMSTRING;
    eventName: STRING;
}
export interface EventInfo_$0 {
    kind: ASTKinds.EventInfo_$0;
    start: HOUR;
    end: HOUR;
}
export type EMAIL = string;
export type LINK = string;
export type DATE = string;
export type HOUR = string;
export type STRING = string;
export type ROOMSTRING = string;
export type MULTISTRING = string;
export type INT = string;
export interface ENDLINE {
    kind: ASTKinds.ENDLINE;
}
export type _ = string;
export class Parser {
    private readonly input: string;
    private pos: PosInfo;
    private negating: boolean = false;
    private memoSafe: boolean = true;
    constructor(input: string) {
        this.pos = {overallPos: 0, line: 1, offset: 0};
        this.input = input;
    }
    public reset(pos: PosInfo) {
        this.pos = pos;
    }
    public finished(): boolean {
        return this.pos.overallPos === this.input.length;
    }
    public clearMemos(): void {
    }
    public matchRoot($$dpth: number, $$cr?: ErrorTracker): Nullable<Root> {
        return this.run<Root>($$dpth,
            () => {
                let $scope$rooms: Nullable<Rooms>;
                let $scope$papers: Nullable<Papers>;
                let $scope$events: Nullable<Events>;
                let $scope$program: Nullable<Program>;
                let $$res: Nullable<Root> = null;
                if (true
                    && ($scope$rooms = this.matchRooms($$dpth + 1, $$cr)) !== null
                    && ($scope$papers = this.matchPapers($$dpth + 1, $$cr)) !== null
                    && ($scope$events = this.matchEvents($$dpth + 1, $$cr)) !== null
                    && ($scope$program = this.matchProgram($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Root, rooms: $scope$rooms, papers: $scope$papers, events: $scope$events, program: $scope$program};
                }
                return $$res;
            });
    }
    public matchRooms($$dpth: number, $$cr?: ErrorTracker): Nullable<Rooms> {
        return this.run<Rooms>($$dpth,
            () => {
                let $scope$rooms: Nullable<Room[]>;
                let $$res: Nullable<Rooms> = null;
                if (true
                    && this.regexAccept(String.raw`(?:#)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[Rr]ooms)`, $$dpth + 1, $$cr) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                    && ($scope$rooms = this.loop<Room>(() => this.matchRoom($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.Rooms, rooms: $scope$rooms};
                }
                return $$res;
            });
    }
    public matchRoom($$dpth: number, $$cr?: ErrorTracker): Nullable<Room> {
        return this.run<Room>($$dpth,
            () => {
                let $scope$name: Nullable<STRING>;
                let $scope$capacite: Nullable<Nullable<Room_$0>>;
                let $$res: Nullable<Room> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && (($scope$capacite = this.matchRoom_$0($$dpth + 1, $$cr)) || true)
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.Room, name: $scope$name, capacite: $scope$capacite};
                }
                return $$res;
            });
    }
    public matchRoom_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Room_$0> {
        return this.run<Room_$0>($$dpth,
            () => {
                let $scope$value: Nullable<INT>;
                let $$res: Nullable<Room_$0> = null;
                if (true
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchINT($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.Room_$0, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchPapers($$dpth: number, $$cr?: ErrorTracker): Nullable<Papers> {
        return this.run<Papers>($$dpth,
            () => {
                let $scope$papers: Nullable<Paper[]>;
                let $$res: Nullable<Papers> = null;
                if (true
                    && this.regexAccept(String.raw`(?:#)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[Pp]apers)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                    && ($scope$papers = this.loop<Paper>(() => this.matchPaper($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.Papers, papers: $scope$papers};
                }
                return $$res;
            });
    }
    public matchPaper($$dpth: number, $$cr?: ErrorTracker): Nullable<Paper> {
        return this.run<Paper>($$dpth,
            () => {
                let $scope$paperName: Nullable<STRING>;
                let $scope$authors: Nullable<Person[]>;
                let $scope$abstract: Nullable<Nullable<Abstract>>;
                let $scope$video: Nullable<Nullable<Video>>;
                let $$res: Nullable<Paper> = null;
                if (true
                    && this.regexAccept(String.raw`(?:##)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$paperName = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                    && ($scope$authors = this.loop<Person>(() => this.matchPerson($$dpth + 1, $$cr), true)) !== null
                    && (($scope$abstract = this.matchAbstract($$dpth + 1, $$cr)) || true)
                    && (($scope$video = this.matchVideo($$dpth + 1, $$cr)) || true)
                ) {
                    $$res = {kind: ASTKinds.Paper, paperName: $scope$paperName, authors: $scope$authors, abstract: $scope$abstract, video: $scope$video};
                }
                return $$res;
            });
    }
    public matchPerson($$dpth: number, $$cr?: ErrorTracker): Nullable<Person> {
        return this.run<Person>($$dpth,
            () => {
                let $scope$name: Nullable<STRING>;
                let $scope$homepage: Nullable<Nullable<Person_$0>>;
                let $scope$email: Nullable<Nullable<Person_$1>>;
                let $scope$about: Nullable<Nullable<Person_$2>>;
                let $$res: Nullable<Person> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && (($scope$homepage = this.matchPerson_$0($$dpth + 1, $$cr)) || true)
                    && (($scope$email = this.matchPerson_$1($$dpth + 1, $$cr)) || true)
                    && (($scope$about = this.matchPerson_$2($$dpth + 1, $$cr)) || true)
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.Person, name: $scope$name, homepage: $scope$homepage, email: $scope$email, about: $scope$about};
                }
                return $$res;
            });
    }
    public matchPerson_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<Person_$0> {
        return this.run<Person_$0>($$dpth,
            () => {
                let $scope$value: Nullable<LINK>;
                let $$res: Nullable<Person_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchLINK($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Person_$0, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchPerson_$1($$dpth: number, $$cr?: ErrorTracker): Nullable<Person_$1> {
        return this.run<Person_$1>($$dpth,
            () => {
                let $scope$value: Nullable<EMAIL>;
                let $$res: Nullable<Person_$1> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchEMAIL($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Person_$1, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchPerson_$2($$dpth: number, $$cr?: ErrorTracker): Nullable<Person_$2> {
        return this.run<Person_$2>($$dpth,
            () => {
                let $scope$value: Nullable<STRING>;
                let $$res: Nullable<Person_$2> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:,)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$value = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.Person_$2, value: $scope$value};
                }
                return $$res;
            });
    }
    public matchAbstract($$dpth: number, $$cr?: ErrorTracker): Nullable<Abstract> {
        return this.run<Abstract>($$dpth,
            () => {
                let $scope$text: Nullable<MULTISTRING>;
                let $$res: Nullable<Abstract> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\*abstract\*:)`, $$dpth + 1, $$cr) !== null
                    && this.matchENDLINE($$dpth + 1, $$cr) !== null
                    && ($scope$text = this.matchMULTISTRING($$dpth + 1, $$cr)) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.Abstract, text: $scope$text};
                }
                return $$res;
            });
    }
    public matchVideo($$dpth: number, $$cr?: ErrorTracker): Nullable<Video> {
        return this.run<Video>($$dpth,
            () => {
                let $scope$url: Nullable<LINK>;
                let $$res: Nullable<Video> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\*video\*:)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$url = this.matchLINK($$dpth + 1, $$cr)) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.Video, url: $scope$url};
                }
                return $$res;
            });
    }
    public matchEvents($$dpth: number, $$cr?: ErrorTracker): Nullable<Events> {
        return this.run<Events>($$dpth,
            () => {
                let $scope$events: Nullable<Event[]>;
                let $$res: Nullable<Events> = null;
                if (true
                    && this.regexAccept(String.raw`(?:#)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[Ee]vents)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                    && ($scope$events = this.loop<Event>(() => this.matchEvent($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.Events, events: $scope$events};
                }
                return $$res;
            });
    }
    public matchEvent($$dpth: number, $$cr?: ErrorTracker): Nullable<Event> {
        return this.choice<Event>([
            () => this.matchEvent_1($$dpth + 1, $$cr),
            () => this.matchEvent_2($$dpth + 1, $$cr),
            () => this.matchEvent_3($$dpth + 1, $$cr),
        ]);
    }
    public matchEvent_1($$dpth: number, $$cr?: ErrorTracker): Nullable<Event_1> {
        return this.matchSimpleEvent($$dpth + 1, $$cr);
    }
    public matchEvent_2($$dpth: number, $$cr?: ErrorTracker): Nullable<Event_2> {
        return this.matchOrganizedEvent($$dpth + 1, $$cr);
    }
    public matchEvent_3($$dpth: number, $$cr?: ErrorTracker): Nullable<Event_3> {
        return this.matchTalkSession($$dpth + 1, $$cr);
    }
    public matchSimpleEvent($$dpth: number, $$cr?: ErrorTracker): Nullable<SimpleEvent> {
        return this.run<SimpleEvent>($$dpth,
            () => {
                let $scope$eventName: Nullable<STRING>;
                let $scope$abstract: Nullable<Nullable<Abstract>>;
                let $$res: Nullable<SimpleEvent> = null;
                if (true
                    && this.regexAccept(String.raw`(?:##)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$eventName = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                    && (($scope$abstract = this.matchAbstract($$dpth + 1, $$cr)) || true)
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.SimpleEvent, eventName: $scope$eventName, abstract: $scope$abstract};
                }
                return $$res;
            });
    }
    public matchOrganizedEvent($$dpth: number, $$cr?: ErrorTracker): Nullable<OrganizedEvent> {
        return this.run<OrganizedEvent>($$dpth,
            () => {
                let $scope$eventType: Nullable<STRING>;
                let $scope$eventName: Nullable<STRING>;
                let $scope$organizers: Nullable<Person[]>;
                let $scope$abstract: Nullable<Nullable<Abstract>>;
                let $$res: Nullable<OrganizedEvent> = null;
                if (true
                    && this.regexAccept(String.raw`(?:##)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\()`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$eventType = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\))`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$eventName = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                    && ($scope$organizers = this.loop<Person>(() => this.matchPerson($$dpth + 1, $$cr), true)) !== null
                    && (($scope$abstract = this.matchAbstract($$dpth + 1, $$cr)) || true)
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.OrganizedEvent, eventType: $scope$eventType, eventName: $scope$eventName, organizers: $scope$organizers, abstract: $scope$abstract};
                }
                return $$res;
            });
    }
    public matchTalkSession($$dpth: number, $$cr?: ErrorTracker): Nullable<TalkSession> {
        return this.run<TalkSession>($$dpth,
            () => {
                let $scope$eventType: Nullable<STRING>;
                let $scope$eventName: Nullable<STRING>;
                let $scope$organizers: Nullable<Person[]>;
                let $scope$abstract: Nullable<Nullable<Abstract>>;
                let $scope$papers: Nullable<TalkSession_$0[]>;
                let $$res: Nullable<TalkSession> = null;
                if (true
                    && this.regexAccept(String.raw`(?:##)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\[)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$eventType = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:\])`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$eventName = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                    && ($scope$organizers = this.loop<Person>(() => this.matchPerson($$dpth + 1, $$cr), true)) !== null
                    && (($scope$abstract = this.matchAbstract($$dpth + 1, $$cr)) || true)
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                    && this.regexAccept(String.raw`(?:###)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[Pp]apers)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                    && ($scope$papers = this.loop<TalkSession_$0>(() => this.matchTalkSession_$0($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.TalkSession, eventType: $scope$eventType, eventName: $scope$eventName, organizers: $scope$organizers, abstract: $scope$abstract, papers: $scope$papers};
                }
                return $$res;
            });
    }
    public matchTalkSession_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<TalkSession_$0> {
        return this.run<TalkSession_$0>($$dpth,
            () => {
                let $scope$name: Nullable<STRING>;
                let $$res: Nullable<TalkSession_$0> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$name = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.TalkSession_$0, name: $scope$name};
                }
                return $$res;
            });
    }
    public matchProgram($$dpth: number, $$cr?: ErrorTracker): Nullable<Program> {
        return this.run<Program>($$dpth,
            () => {
                let $scope$days: Nullable<Day[]>;
                let $$res: Nullable<Program> = null;
                if (true
                    && this.regexAccept(String.raw`(?:#)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:[Pp]rogram)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                    && ($scope$days = this.loop<Day>(() => this.matchDay($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.Program, days: $scope$days};
                }
                return $$res;
            });
    }
    public matchDay($$dpth: number, $$cr?: ErrorTracker): Nullable<Day> {
        return this.run<Day>($$dpth,
            () => {
                let $scope$date: Nullable<DATE>;
                let $scope$eventinfo: Nullable<EventInfo[]>;
                let $$res: Nullable<Day> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:##)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$date = this.matchDATE($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                    && ($scope$eventinfo = this.loop<EventInfo>(() => this.matchEventInfo($$dpth + 1, $$cr), true)) !== null
                ) {
                    $$res = {kind: ASTKinds.Day, date: $scope$date, eventinfo: $scope$eventinfo};
                }
                return $$res;
            });
    }
    public matchEventInfo($$dpth: number, $$cr?: ErrorTracker): Nullable<EventInfo> {
        return this.run<EventInfo>($$dpth,
            () => {
                let $scope$timeSlot: Nullable<EventInfo_$0>;
                let $scope$roomName: Nullable<ROOMSTRING>;
                let $scope$eventName: Nullable<STRING>;
                let $$res: Nullable<EventInfo> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$timeSlot = this.matchEventInfo_$0($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:in)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$roomName = this.matchROOMSTRING($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?::)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$eventName = this.matchSTRING($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.loop<ENDLINE>(() => this.matchENDLINE($$dpth + 1, $$cr), true) !== null
                ) {
                    $$res = {kind: ASTKinds.EventInfo, timeSlot: $scope$timeSlot, roomName: $scope$roomName, eventName: $scope$eventName};
                }
                return $$res;
            });
    }
    public matchEventInfo_$0($$dpth: number, $$cr?: ErrorTracker): Nullable<EventInfo_$0> {
        return this.run<EventInfo_$0>($$dpth,
            () => {
                let $scope$start: Nullable<HOUR>;
                let $scope$end: Nullable<HOUR>;
                let $$res: Nullable<EventInfo_$0> = null;
                if (true
                    && ($scope$start = this.matchHOUR($$dpth + 1, $$cr)) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:-)`, $$dpth + 1, $$cr) !== null
                    && this.match_($$dpth + 1, $$cr) !== null
                    && ($scope$end = this.matchHOUR($$dpth + 1, $$cr)) !== null
                ) {
                    $$res = {kind: ASTKinds.EventInfo_$0, start: $scope$start, end: $scope$end};
                }
                return $$res;
            });
    }
    public matchEMAIL($$dpth: number, $$cr?: ErrorTracker): Nullable<EMAIL> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9.!#$%&\'*+/=?^_\`{|}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*)`, $$dpth + 1, $$cr);
    }
    public matchLINK($$dpth: number, $$cr?: ErrorTracker): Nullable<LINK> {
        return this.regexAccept(String.raw`(?:https?:\/\/(www\.)?[-a-zA-Z0-9@:%._\+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_\+.~#?&//=]*))`, $$dpth + 1, $$cr);
    }
    public matchDATE($$dpth: number, $$cr?: ErrorTracker): Nullable<DATE> {
        return this.regexAccept(String.raw`(?:(19|20)[0-9][0-9]-(0[1-9]|1[012])-(0[1-9]|[12][0-9]|3[01]))`, $$dpth + 1, $$cr);
    }
    public matchHOUR($$dpth: number, $$cr?: ErrorTracker): Nullable<HOUR> {
        return this.regexAccept(String.raw`(?:(0[0-9]|1[0-9]|2[0-3]):([0-5][0-9]))`, $$dpth + 1, $$cr);
    }
    public matchSTRING($$dpth: number, $$cr?: ErrorTracker): Nullable<STRING> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9]([a-zA-Z0-9.\- \:éíëàè\'\/]*[a-zA-Z0-9.éàíèë])?)`, $$dpth + 1, $$cr);
    }
    public matchROOMSTRING($$dpth: number, $$cr?: ErrorTracker): Nullable<ROOMSTRING> {
        return this.regexAccept(String.raw`(?:[a-zA-Z0-9]([a-zA-Z0-9.\- éíëàè]*[a-zA-Z0-9.éàíèë])?)`, $$dpth + 1, $$cr);
    }
    public matchMULTISTRING($$dpth: number, $$cr?: ErrorTracker): Nullable<MULTISTRING> {
        return this.regexAccept(String.raw`(?:([^\n\r]+\r?\n)*)`, $$dpth + 1, $$cr);
    }
    public matchINT($$dpth: number, $$cr?: ErrorTracker): Nullable<INT> {
        return this.regexAccept(String.raw`(?:[0-9]+)`, $$dpth + 1, $$cr);
    }
    public matchENDLINE($$dpth: number, $$cr?: ErrorTracker): Nullable<ENDLINE> {
        return this.run<ENDLINE>($$dpth,
            () => {
                let $$res: Nullable<ENDLINE> = null;
                if (true
                    && this.match_($$dpth + 1, $$cr) !== null
                    && this.regexAccept(String.raw`(?:;|\n)`, $$dpth + 1, $$cr) !== null
                ) {
                    $$res = {kind: ASTKinds.ENDLINE, };
                }
                return $$res;
            });
    }
    public match_($$dpth: number, $$cr?: ErrorTracker): Nullable<_> {
        return this.regexAccept(String.raw`(?:[ \t\r\f]*)`, $$dpth + 1, $$cr);
    }
    public test(): boolean {
        const mrk = this.mark();
        const res = this.matchRoot(0);
        const ans = res !== null;
        this.reset(mrk);
        return ans;
    }
    public parse(): ParseResult {
        const mrk = this.mark();
        const res = this.matchRoot(0);
        if (res)
            return {ast: res, errs: []};
        this.reset(mrk);
        const rec = new ErrorTracker();
        this.clearMemos();
        this.matchRoot(0, rec);
        const err = rec.getErr()
        return {ast: res, errs: err !== null ? [err] : []}
    }
    public mark(): PosInfo {
        return this.pos;
    }
    private loop<T>(func: $$RuleType<T>, star: boolean = false): Nullable<T[]> {
        const mrk = this.mark();
        const res: T[] = [];
        for (;;) {
            const t = func();
            if (t === null) {
                break;
            }
            res.push(t);
        }
        if (star || res.length > 0) {
            return res;
        }
        this.reset(mrk);
        return null;
    }
    private run<T>($$dpth: number, fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn()
        if (res !== null)
            return res;
        this.reset(mrk);
        return null;
    }
    private choice<T>(fns: Array<$$RuleType<T>>): Nullable<T> {
        for (const f of fns) {
            const res = f();
            if (res !== null) {
                return res;
            }
        }
        return null;
    }
    private regexAccept(match: string, dpth: number, cr?: ErrorTracker): Nullable<string> {
        return this.run<string>(dpth,
            () => {
                const reg = new RegExp(match, "y");
                const mrk = this.mark();
                reg.lastIndex = mrk.overallPos;
                const res = this.tryConsume(reg);
                if(cr) {
                    cr.record(mrk, res, {
                        kind: "RegexMatch",
                        // We substring from 3 to len - 1 to strip off the
                        // non-capture group syntax added as a WebKit workaround
                        literal: match.substring(3, match.length - 1),
                        negated: this.negating,
                    });
                }
                return res;
            });
    }
    private tryConsume(reg: RegExp): Nullable<string> {
        const res = reg.exec(this.input);
        if (res) {
            let lineJmp = 0;
            let lind = -1;
            for (let i = 0; i < res[0].length; ++i) {
                if (res[0][i] === "\n") {
                    ++lineJmp;
                    lind = i;
                }
            }
            this.pos = {
                overallPos: reg.lastIndex,
                line: this.pos.line + lineJmp,
                offset: lind === -1 ? this.pos.offset + res[0].length : (res[0].length - lind - 1)
            };
            return res[0];
        }
        return null;
    }
    private noConsume<T>(fn: $$RuleType<T>): Nullable<T> {
        const mrk = this.mark();
        const res = fn();
        this.reset(mrk);
        return res;
    }
    private negate<T>(fn: $$RuleType<T>): Nullable<boolean> {
        const mrk = this.mark();
        const oneg = this.negating;
        this.negating = !oneg;
        const res = fn();
        this.negating = oneg;
        this.reset(mrk);
        return res === null ? true : null;
    }
    private memoise<K>(rule: $$RuleType<K>, memo: Map<number, [Nullable<K>, PosInfo]>): Nullable<K> {
        const $scope$pos = this.mark();
        const $scope$memoRes = memo.get($scope$pos.overallPos);
        if(this.memoSafe && $scope$memoRes !== undefined) {
        this.reset($scope$memoRes[1]);
        return $scope$memoRes[0];
        }
        const $scope$result = rule();
        if(this.memoSafe)
        memo.set($scope$pos.overallPos, [$scope$result, this.mark()]);
        return $scope$result;
    }
}
export function parse(s: string): ParseResult {
    const p = new Parser(s);
    return p.parse();
}
export interface ParseResult {
    ast: Nullable<Root>;
    errs: SyntaxErr[];
}
export interface PosInfo {
    readonly overallPos: number;
    readonly line: number;
    readonly offset: number;
}
export interface RegexMatch {
    readonly kind: "RegexMatch";
    readonly negated: boolean;
    readonly literal: string;
}
export type EOFMatch = { kind: "EOF"; negated: boolean };
export type MatchAttempt = RegexMatch | EOFMatch;
export class SyntaxErr {
    public pos: PosInfo;
    public expmatches: MatchAttempt[];
    constructor(pos: PosInfo, expmatches: MatchAttempt[]) {
        this.pos = pos;
        this.expmatches = [...expmatches];
    }
    public toString(): string {
        return `Syntax Error at line ${this.pos.line}:${this.pos.offset}. Expected one of ${this.expmatches.map(x => x.kind === "EOF" ? " EOF" : ` ${x.negated ? 'not ': ''}'${x.literal}'`)}`;
    }
}
class ErrorTracker {
    private mxpos: PosInfo = {overallPos: -1, line: -1, offset: -1};
    private regexset: Set<string> = new Set();
    private pmatches: MatchAttempt[] = [];
    public record(pos: PosInfo, result: any, att: MatchAttempt) {
        if ((result === null) === att.negated)
            return;
        if (pos.overallPos > this.mxpos.overallPos) {
            this.mxpos = pos;
            this.pmatches = [];
            this.regexset.clear()
        }
        if (this.mxpos.overallPos === pos.overallPos) {
            if(att.kind === "RegexMatch") {
                if(!this.regexset.has(att.literal))
                    this.pmatches.push(att);
                this.regexset.add(att.literal);
            } else {
                this.pmatches.push(att);
            }
        }
    }
    public getErr(): SyntaxErr | null {
        if (this.mxpos.overallPos !== -1)
            return new SyntaxErr(this.mxpos, this.pmatches);
        return null;
    }
}